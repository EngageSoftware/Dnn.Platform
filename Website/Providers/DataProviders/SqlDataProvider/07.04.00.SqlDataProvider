/************************************************************/
/*****              SqlDataProvider                     *****/
/*****                                                  *****/
/*****                                                  *****/
/***** Note: To manually execute this script you must   *****/
/*****       perform a search and replace operation     *****/
/*****       for {databaseOwner} and {objectQualifier}  *****/
/*****                                                  *****/
/************************************************************/

/***** Tab Versioning table and Sprocs *****/
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}TabVersions]') AND type in (N'U'))
BEGIN
    CREATE TABLE {databaseOwner}[{objectQualifier}TabVersions](
	    [TabVersionId] [INT] IDENTITY(1,1) NOT NULL,
        [TabId] [INT] NOT NULL,
		[Version] [INT] NOT NULL,
		[TimeStamp] [DATETIME] NOT NULL,
		[IsPublished] [BIT] NOT NULL,
	    [CreatedByUserID] [INT] NOT NULL,
		[CreatedOnDate] [DATETIME] NOT NULL,
		[LastModifiedByUserID] [INT] NOT NULL,
		[LastModifiedOnDate] [DATETIME] NOT NULL,
        CONSTRAINT [PK_{objectQualifier}TabVersions] PRIMARY KEY CLUSTERED ([TabVersionId] ASC)
    ) ON [PRIMARY]

    ALTER TABLE {databaseOwner}[{objectQualifier}TabVersions] 
        WITH CHECK ADD CONSTRAINT [FK_{objectQualifier}TabVersions_{objectQualifier}TabId] FOREIGN KEY([TabId])
        REFERENCES {databaseOwner}[{objectQualifier}Tabs] ([TabID])
    ON DELETE CASCADE

    CREATE NONCLUSTERED INDEX IX_{objectQualifier}TabVersions_TabId ON {databaseOwner}[{objectQualifier}TabVersions](TabId) 
END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetTabVersions]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetTabVersions]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetTabVersions]
	@TabId INT
AS
BEGIN
	SELECT   
		[TabVersionId],
		[TabId],
		[Version],
		[TimeStamp],
		[IsPublished],
	    [CreatedByUserID],
		[CreatedOnDate],
		[LastModifiedByUserID],
		[LastModifiedOnDate]
	FROM {databaseOwner}[{objectQualifier}TabVersions]
	WHERE [TabId] = @TabId
END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}SaveTabVersion]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}SaveTabVersion]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}SaveTabVersion]
    @Id INT,
    @TabId INT,
    @TimeStamp DATETIME,
    @Version INT,
	@IsPublished BIT,
    @CreatedByUserID [INT] = -1,
	@LastModifiedByUserID [INT] = -1
AS
BEGIN
    IF ISNULL(@Id, 0) = 0
    BEGIN
        INSERT INTO {databaseOwner}[{objectQualifier}TabVersions](            
            [TabId],
            [TimeStamp],
            [Version],
			[IsPublished],
            [CreatedByUserID],
            [CreatedOnDate],
            [LastModifiedByUserID],
            [LastModifiedOnDate]
        ) VALUES (
            @TabId,
            @TimeStamp,
            @Version,      
			@IsPublished,      
            @CreatedByUserID,
            GETDATE(),
            @LastModifiedByUserID,
            GETDATE()
        )

        SELECT @Id = SCOPE_IDENTITY()
    END
    ELSE
    BEGIN
        UPDATE {databaseOwner}[{objectQualifier}TabVersions] SET            
            [TabId] = @TabId,
            [Version] = @Version,
            [TimeStamp] = @TimeStamp,
			[IsPublished] = @IsPublished,
            [LastModifiedByUserID] = @LastModifiedByUserID,
            [LastModifiedOnDate] = GETDATE()
        WHERE TabVersionId = @Id
    END
	SELECT @Id
END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}DeleteTabVersion]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}DeleteTabVersion]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteTabVersion]
    @Id INT
AS
BEGIN
    DELETE FROM {databaseOwner}[{objectQualifier}TabVersions] WHERE TabVersionId = @Id
END
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}TabVersionDetails]') AND type in (N'U'))
BEGIN
    CREATE TABLE {databaseOwner}[{objectQualifier}TabVersionDetails](
	    [TabVersionDetailId] [INT] IDENTITY(1,1) NOT NULL,
        [TabVersionId] [INT] NOT NULL,
		[ModuleId] [INT] NOT NULL,
		[ModuleVersion] [INT] NOT NULL,
		[PaneName] NVARCHAR(50) NOT NULL,
		[ModuleOrder] [INT] NOT NULL,
		[Action] [INT] NOT NULL,
	    [CreatedByUserID] [INT] NOT NULL,
		[CreatedOnDate] [DATETIME] NOT NULL,
		[LastModifiedByUserID] [INT] NOT NULL,
		[LastModifiedOnDate] [DATETIME] NOT NULL,
        CONSTRAINT [PK_{objectQualifier}TabVersionDetails] PRIMARY KEY CLUSTERED ([TabVersionDetailId] ASC)
    ) ON [PRIMARY]

    ALTER TABLE {databaseOwner}[{objectQualifier}TabVersionDetails] 
        WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}TabVersionDetails_{objectQualifier}TabVersionId] FOREIGN KEY([TabVersionId])
        REFERENCES {databaseOwner}[{objectQualifier}TabVersions] ([TabVersionId])
    ON DELETE CASCADE

    CREATE NONCLUSTERED INDEX IX_{objectQualifier}TabVersionDetails_TabVersionId ON {databaseOwner}[{objectQualifier}TabVersionDetails](TabVersionId) 
END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetTabVersionDetails]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetTabVersionDetails]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetTabVersionDetails]
	@TabVersionId INT
AS
BEGIN
	SELECT   
		[TabVersionDetailId] ,
        [TabVersionId] ,
		[ModuleId] ,
		[ModuleVersion] ,
		[PaneName] ,
		[ModuleOrder] ,
		[Action],
	    [CreatedByUserID] ,
		[CreatedOnDate],
		[LastModifiedByUserID],
		[LastModifiedOnDate]
	FROM {databaseOwner}[{objectQualifier}TabVersionDetails]
	WHERE [TabVersionId] = @TabVersionId
END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}SaveTabVersionDetail]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}SaveTabVersionDetail]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}SaveTabVersionDetail]
    @Id INT,
    @TabVersionId INT,
    @ModuleId INT,
    @ModuleVersion INT,
	@PaneName NVARCHAR(50),
	@ModuleOrder INT,
	@Action INT,
    @CreatedByUserID [INT] = -1,
	@LastModifiedByUserID [INT] = -1
AS
BEGIN
    IF ISNULL(@Id, 0) = 0
    BEGIN
        INSERT INTO {databaseOwner}[{objectQualifier}TabVersionDetails](
            [TabVersionId],
            [ModuleId],
            [ModuleVersion],
			[PaneName],
            [ModuleOrder],
			[Action],
            [CreatedByUserID],
            [CreatedOnDate],
            [LastModifiedByUserID],
            [LastModifiedOnDate]
        ) VALUES (
            @TabVersionId,
			@ModuleId,            
            @ModuleVersion,            
			@PaneName,
			@ModuleOrder,
			@Action,
            @CreatedByUserID,
            GETDATE(),
            @LastModifiedByUserID,
            GETDATE()
        )

        SELECT @Id = SCOPE_IDENTITY()
    END
    ELSE
    BEGIN
        UPDATE {databaseOwner}[{objectQualifier}TabVersionDetails] SET            
            [TabVersionId] = @TabVersionId,
			[ModuleId] = @ModuleId,
            [ModuleVersion] = @ModuleVersion,            
            [PaneName] = @PaneName,
			[ModuleOrder] = @ModuleOrder,
			[Action] = @Action,
            [LastModifiedByUserID] = @LastModifiedByUserID,
            [LastModifiedOnDate] = GETDATE()
        WHERE TabVersionDetailId = @Id
    END
	SELECT @Id
END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}DeleteTabVersionDetail]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}DeleteTabVersionDetail]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteTabVersionDetail]
    @Id INT
AS
BEGIN
    DELETE FROM {databaseOwner}[{objectQualifier}TabVersionDetails] WHERE TabVersionDetailId = @Id
END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetTabVersionDetailsHistory]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetTabVersionDetailsHistory]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetTabVersionDetailsHistory]
	@TabID iNT,
    @Version INT
AS
BEGIN    
	SELECT tvd.[TabVersionDetailId]
		  ,tvd.[TabVersionId]
		  ,tvd.[ModuleId]
		  ,tvd.[ModuleVersion]
		  ,tvd.[PaneName]
		  ,tvd.[ModuleOrder]
		  ,tvd.[Action]
		  ,tvd.[CreatedByUserID]
		  ,tvd.[CreatedOnDate]
		  ,tvd.[LastModifiedByUserID]
		  ,tvd.[LastModifiedOnDate]
	FROM {databaseOwner}[{objectQualifier}TabVersionDetails] tvd
	INNER JOIN {databaseOwner}[{objectQualifier}TabVersions] tv ON tvd.TabVersionId = tv.TabVersionId
	WHERE tv.Version <= @Version
		AND tv.TabId = @TabID
	ORDER BY tvd.CreatedOnDate 
END
GO

ALTER TABLE {databaseOwner}{objectQualifier}Tabs ADD [HasBeenPublished] [bit] NOT NULL CONSTRAINT [DF_Tabs_HasBeenPublished] DEFAULT (0) 
GO

UPDATE {databaseOwner}{objectQualifier}Tabs SET HasBeenPublished = 1;

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}vw_Tabs]') and OBJECTPROPERTY(id, N'IsView') = 1)
    DROP VIEW {databaseOwner}[{objectQualifier}vw_Tabs]
GO

-- updated view to use new function
-- note comment regarding signature modification
CREATE VIEW {databaseOwner}[{objectQualifier}vw_Tabs]
AS
    SELECT
        T.TabID,
        T.TabOrder,
        T.PortalID,
        T.TabName,
        T.ParentId,
        T.[Level],
        T.TabPath,
        T.UniqueId,
        T.VersionGuid,
        T.DefaultLanguageGuid,
        T.LocalizedVersionGuid,
        T.IsVisible,
		T.HasBeenPublished,
        {databaseOwner}{objectQualifier}FilePath(T.IconFile)      AS IconFile,
        {databaseOwner}{objectQualifier}FilePath(T.IconFileLarge) AS IconFileLarge,
        T.DisableLink,
        T.Title,
        T.Description,
        T.KeyWords,
        T.IsDeleted,
        T.SkinSrc,
        T.ContainerSrc,
        T.StartDate,
        T.EndDate,
        T.Url,
        CASE WHEN {databaseOwner}{objectQualifier}HasChildTab(T.TabID) = 1 THEN 'true' ELSE 'false' END AS HasChildren,
        T.RefreshInterval,
        T.PageHeadText,
        T.IsSecure,
        T.PermanentRedirect,
        T.SiteMapPriority,
        CI.ContentItemID,
        CI.[Content],
        CI.ContentTypeID,
        CI.ModuleID,
        CI.ContentKey,
        CI.Indexed,
        CI.StateID,
        T.CultureCode,
        T.CreatedByUserID,
        T.CreatedOnDate,
        T.LastModifiedByUserID,
        T.LastModifiedOnDate
    FROM       {databaseOwner}{objectQualifier}Tabs         AS T
    LEFT  JOIN {databaseOwner}{objectQualifier}ContentItems AS CI ON T.ContentItemID = CI.ContentItemID
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}PublishTab]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}PublishTab]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}PublishTab]
	@TabID INT
AS
BEGIN 
        UPDATE {databaseOwner}[{objectQualifier}Tabs] SET            
            [HasBeenPublished] = 1
        WHERE TabID = @TabID
END
GO

/**************************/
/** Workflow API Changes **/
/**************************/

/* Added IsSystem column to define System Workflows (i.e.: Default Workflows) */
ALTER TABLE {databaseOwner}{objectQualifier}ContentWorkflows ADD [IsSystem] [bit] NOT NULL DEFAULT (0) 
GO

/* Added a default value to IsDeleted column */
ALTER TABLE {databaseOwner}{objectQualifier}ContentWorkflows ADD CONSTRAINT DF_ContentWorkflows_IsDeleted DEFAULT 0 FOR IsDeleted
GO

/* Added a default value to StartAfterCreating column */
ALTER TABLE {databaseOwner}{objectQualifier}ContentWorkflows ADD CONSTRAINT DF_ContentWorkflows_StartAfterCreating DEFAULT 1 FOR StartAfterCreating
GO

/* Added a default value to StartAfterEditing column */
ALTER TABLE {databaseOwner}{objectQualifier}ContentWorkflows ADD CONSTRAINT DF_ContentWorkflows_StartAfterEditing DEFAULT 1 FOR StartAfterEditing
GO

/* Added a default value to DispositionEnabled column */
ALTER TABLE {databaseOwner}{objectQualifier}ContentWorkflows ADD CONSTRAINT DF_ContentWorkflows_DispositionEnabled DEFAULT 0 FOR DispositionEnabled
GO

/* Added WorkflowKey column to define Workflows string key (i.e.: Default Workflows keys) */
ALTER TABLE {databaseOwner}{objectQualifier}ContentWorkflows ADD [WorkflowKey] NVARCHAR(40) NOT NULL DEFAULT (N'') 
GO

/* Added a default value to column IsActive */
ALTER TABLE {databaseOwner}{objectQualifier}ContentWorkflowStates ADD CONSTRAINT DF_ContentWorkflowStates_IsActive DEFAULT 1 FOR IsActive
GO

/* Added a default value to column SendEmail */
ALTER TABLE {databaseOwner}{objectQualifier}ContentWorkflowStates ADD CONSTRAINT DF_ContentWorkflowStates_SendEmail DEFAULT 0 FOR SendEmail
GO

/* Added a default value to column SendMessage */
ALTER TABLE {databaseOwner}{objectQualifier}ContentWorkflowStates ADD CONSTRAINT DF_ContentWorkflowStates_SendMessage DEFAULT 0 FOR SendMessage
GO

/* Added a default value to column IsDisposalState */
ALTER TABLE {databaseOwner}{objectQualifier}ContentWorkflowStates ADD CONSTRAINT DF_ContentWorkflowStates_IsDisposalState DEFAULT 0 FOR IsDisposalState
GO

/* Added a default value to column OnCompleteMessageSubject */
ALTER TABLE {databaseOwner}{objectQualifier}ContentWorkflowStates ADD CONSTRAINT DF_ContentWorkflowStates_OnCompleteMessageSubject DEFAULT N'' FOR OnCompleteMessageSubject
GO

/* Added a default value to column OnCompleteMessageBody */
ALTER TABLE {databaseOwner}{objectQualifier}ContentWorkflowStates ADD CONSTRAINT DF_ContentWorkflowStates_OnCompleteMessageBody DEFAULT N'' FOR OnCompleteMessageBody
GO

/* Added a default value to column OnDiscardMessageSubject */
ALTER TABLE {databaseOwner}{objectQualifier}ContentWorkflowStates ADD CONSTRAINT DF_ContentWorkflowStates_OnDiscardMessageSubject DEFAULT N'' FOR OnDiscardMessageSubject
GO

/* Added a default value to column OnDiscardMessageBody */
ALTER TABLE {databaseOwner}{objectQualifier}ContentWorkflowStates ADD CONSTRAINT DF_ContentWorkflowStates_OnDiscardMessageBody DEFAULT N'' FOR OnDiscardMessageBody
GO

/* Added IsSystem column to define System Workflow States (i.e.: Draft, Published) */
ALTER TABLE {databaseOwner}{objectQualifier}ContentWorkflowStates ADD [IsSystem] [bit] NOT NULL DEFAULT (0) 
GO

/* Added SendNotification column */
ALTER TABLE {databaseOwner}{objectQualifier}ContentWorkflowStates ADD [SendNotification] [bit] NOT NULL DEFAULT (1) 
GO

/* Added SendNotificationToAdministrators column */
ALTER TABLE {databaseOwner}{objectQualifier}ContentWorkflowStates ADD [SendNotificationToAdministrators] [bit] NOT NULL DEFAULT (1) 
GO

/* Added WorkflowLogKey column */
ALTER TABLE {databaseOwner}{objectQualifier}ContentWorkflowLogs ADD [Type] [int] NOT NULL DEFAULT -1 
GO

/* Increased Workflow Log Comment field length to max */
ALTER TABLE {databaseOwner}{objectQualifier}ContentWorkflowLogs ALTER COLUMN [Comment] NVARCHAR(MAX) NOT NULL
GO

/* Set is System Workflows */
UPDATE {databaseOwner}[{objectQualifier}ContentWorkflows] SET IsSystem = 1 where IsSystem = 0
GO

/* Set is System States */
UPDATE {databaseOwner}[{objectQualifier}ContentWorkflowStates] SET IsSystem = 1
  WHERE StateID IN (  
	  SELECT StateID
	  FROM {databaseOwner}[{objectQualifier}ContentWorkflowStates] cf JOIN 
	  (SELECT WorkflowId, MAX([order]) as 'LastState', MIN([Order]) as 'FirstState' 
	  FROM {databaseOwner}[{objectQualifier}ContentWorkflowStates]
	  GROUP BY WorkflowID) a ON cf.WorkflowID = a.WorkflowID
	  WHERE [Order] = a.FirstState OR [Order] = a.LastState) 
  AND IsSystem = 0;
GO

/* Get Workflow Usage */
IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetContentWorkflowUsage]', N'P') IS NOT NULL
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetContentWorkflowUsage]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetContentWorkflowUsage]
	@WorkflowId INT,
	@PageIndex INT,
	@PageSize INT
AS
	DECLARE @StartIndex INT = ((@PageIndex - 1) * @PageSize) + 1
	DECLARE @EndIndex INT = (@PageIndex * @PageSize)
	
	;WITH ContentItemSet AS
    (
		SELECT ci.*, ROW_NUMBER() OVER (Order BY ci.ContentItemId) AS [Index]
		FROM {databaseOwner}[{objectQualifier}ContentItems] ci 
		INNER JOIN {databaseOwner}[{objectQualifier}ContentWorkflowStates] ws ON ci.StateID = ws.StateID
		WHERE ws.WorkflowID = @WorkflowId
    )
   SELECT * FROM ContentItemSet WHERE [Index] BETWEEN @StartIndex AND @EndIndex 
GO

/* Get Workflow Usage Count */
IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetContentWorkflowUsageCount]', N'P') IS NOT NULL
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetContentWorkflowUsageCount]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetContentWorkflowUsageCount]
	@WorkflowId INT
AS
	SELECT COUNT(ci.ContentItemID)
	FROM {databaseOwner}[{objectQualifier}ContentItems] ci 
	INNER JOIN {databaseOwner}[{objectQualifier}ContentWorkflowStates] ws ON ci.StateID = ws.StateID
	WHERE ws.WorkflowID = @WorkflowId
GO

/* Get Workflow State Usage Count */
IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetContentWorkflowStateUsageCount]', N'P') IS NOT NULL
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetContentWorkflowStateUsageCount]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetContentWorkflowStateUsageCount]
	@StateId INT
AS
	SELECT COUNT(ci.ContentItemID)
	FROM {databaseOwner}[{objectQualifier}ContentItems] ci 
	WHERE ci.StateId = @StateId
GO

/* Add Content Workflow Notification with no action (only dismiss) */
IF NOT EXISTS (SELECT NotificationTypeID FROM {databaseOwner}{objectQualifier}CoreMessaging_NotificationTypes WHERE Name = 'ContentWorkflowNoActionNotification' )
BEGIN
	INSERT INTO {databaseOwner}{objectQualifier}CoreMessaging_NotificationTypes(
		[Name]
		,[Description]
		,[CreatedByUserID]
		,[CreatedOnDate]
		,[LastModifiedByUserID]
		,[LastModifiedOnDate]
	) VALUES (
		'ContentWorkflowNoActionNotification',
		'Content Workflow No Action Notification',
		-1,
		GETDATE(),
		-1,
		GETDATE()
	)
END
GO

/* Add Content Workflow Notification when Workflow Starts */
IF NOT EXISTS (SELECT NotificationTypeID FROM {databaseOwner}{objectQualifier}CoreMessaging_NotificationTypes WHERE Name = 'ContentWorkflowStartWorkflowNotification' )
BEGIN
	INSERT INTO {databaseOwner}{objectQualifier}CoreMessaging_NotificationTypes(
		[Name]
		,[Description]
		,[CreatedByUserID]
		,[CreatedOnDate]
		,[LastModifiedByUserID]
		,[LastModifiedOnDate]
	) VALUES (
		'ContentWorkflowStartWorkflowNotification',
		'Content Workflow Start Workflow Notification',
		-1,
		GETDATE(),
		-1,
		GETDATE()
	)
END
GO

/* Add ContentWorkflowActions table */
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}ContentWorkflowActions]') AND type in (N'U'))
BEGIN
    CREATE TABLE {databaseOwner}[{objectQualifier}ContentWorkflowActions](
	    [ActionId] [INT] IDENTITY(1,1) NOT NULL,
        [ContentTypeId] [INT] NOT NULL,
		[ActionType] NVARCHAR(50) NOT NULL,
		[ActionSource] NVARCHAR(256) NOT NULL,
        CONSTRAINT [PK_{objectQualifier}ContentWorkflowActions] PRIMARY KEY CLUSTERED ([ActionId] ASC)
    ) ON [PRIMARY]

    ALTER TABLE {databaseOwner}[{objectQualifier}ContentWorkflowActions] 
        WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}ContentWorkflowActions_{objectQualifier}ContentTypes] FOREIGN KEY([ContentTypeId])
        REFERENCES {databaseOwner}[{objectQualifier}ContentTypes] ([ContentTypeID])
    ON DELETE CASCADE

	CREATE UNIQUE NONCLUSTERED INDEX [ContentTypeId_ActionType] ON {databaseOwner}[{objectQualifier}ContentWorkflowActions] 
	(
		[ContentTypeId] ASC,
		[ActionType] ASC
	)
END
GO

/* Remove Review action and add Approve, Reject */
DECLARE @NotificationTypeId INT
SELECT @NotificationTypeId = NotificationTypeId
    FROM    {databaseOwner}{objectQualifier}CoreMessaging_NotificationTypes
    WHERE   Name = 'ContentWorkflowNotification'
IF @NotificationTypeId IS NOT NULL
BEGIN
	/* Delete Review notification action added int 7.3.0 */
	DELETE FROM {databaseOwner}{objectQualifier}CoreMessaging_NotificationTypeActions WHERE NotificationTypeId = @NotificationTypeId AND NameResourceKey = 'Review'

	/* Add Approve notification action */
    INSERT INTO {databaseOwner}{objectQualifier}CoreMessaging_NotificationTypeActions(
        [NotificationTypeID],
        [NameResourceKey],
        [DescriptionResourceKey],
        [ConfirmResourceKey],
        [Order],
        [APICall],
        [CreatedByUserID],
        [CreatedOnDate],
        [LastModifiedByUserID],
        [LastModifiedOnDate])
    VALUES(
        @NotificationTypeId,
        'Approve',
        'Approve',
        NULL,
        1,
        'DesktopModules/InternalServices/API/ContentWorkflowService/Approve',
        -1,
        GETDATE(),
        -1,
        GETDATE()
        )
		
	/* Add Reject notification action */
	INSERT INTO {databaseOwner}{objectQualifier}CoreMessaging_NotificationTypeActions(
        [NotificationTypeID],
        [NameResourceKey],
        [DescriptionResourceKey],
        [ConfirmResourceKey],
        [Order],
        [APICall],
        [CreatedByUserID],
        [CreatedOnDate],
        [LastModifiedByUserID],
        [LastModifiedOnDate])
    VALUES(
        @NotificationTypeId,
        'Reject',
        'Reject',
        NULL,
        1,
        'DesktopModules/InternalServices/API/ContentWorkflowService/Reject',
        -1,
        GETDATE(),
        -1,
        GETDATE()
        )
END
GO

/* Add action to Start Workflow Notification */
DECLARE @NotificationStartWorkflowTypeId INT
SELECT @NotificationStartWorkflowTypeId = NotificationTypeId
    FROM    {databaseOwner}{objectQualifier}CoreMessaging_NotificationTypes
    WHERE   Name = 'ContentWorkflowStartWorkflowNotification'
IF @NotificationStartWorkflowTypeId IS NOT NULL
BEGIN
	/* Add Submit notification action */
	/* also uses the existing Approve method */
    INSERT INTO {databaseOwner}{objectQualifier}CoreMessaging_NotificationTypeActions(
        [NotificationTypeID],
        [NameResourceKey],
        [DescriptionResourceKey],
        [ConfirmResourceKey],
        [Order],
        [APICall],
        [CreatedByUserID],
        [CreatedOnDate],
        [LastModifiedByUserID],
        [LastModifiedOnDate])
    VALUES(
        @NotificationStartWorkflowTypeId,
        'Submit',
        'Submit',
        NULL,
        1,
        'DesktopModules/InternalServices/API/ContentWorkflowService/Approve',
        -1,
        GETDATE(),
        -1,
        GETDATE()
        )
		
	/* Add Discard notification action */
	/* also uses the existing Reject method */
	INSERT INTO {databaseOwner}{objectQualifier}CoreMessaging_NotificationTypeActions(
        [NotificationTypeID],
        [NameResourceKey],
        [DescriptionResourceKey],
        [ConfirmResourceKey],
        [Order],
        [APICall],
        [CreatedByUserID],
        [CreatedOnDate],
        [LastModifiedByUserID],
        [LastModifiedOnDate])
    VALUES(
        @NotificationStartWorkflowTypeId,
        'Discard',
        'Discard',
        NULL,
        1,
        'DesktopModules/InternalServices/API/ContentWorkflowService/Reject',
        -1,
        GETDATE(),
        -1,
        GETDATE()
        )
END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_GetMessage]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetMessage]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetMessage]
    @MessageID INT
AS 
	SELECT [MessageID], [PortalId], [NotificationTypeID], [To], [From], [Subject], [Body], [ConversationID], [ReplyAllAllowed], [SenderUserID], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate] 
	FROM   {databaseOwner}[{objectQualifier}CoreMessaging_Messages] 
	WHERE  [MessageID] = @MessageID
GO

IF NOT EXISTS( SELECT * FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_NAME = '{objectQualifier}CoreMessaging_NotificationTypes' 
           AND  COLUMN_NAME = 'IsTask')
   BEGIN
        ALTER TABLE {databaseOwner}{objectQualifier}CoreMessaging_NotificationTypes ADD
            IsTask bit NOT NULL DEFAULT ((0))
    END 
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_CreateNotificationType]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_CreateNotificationType]
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_CreateNotificationType]
	@Name nvarchar(100),
	@Description nvarchar(2000),
	@TTL int,
	@DesktopModuleId int,
	@CreatedUpdatedUserID int,
	@IsTask bit
AS
BEGIN
	INSERT INTO {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypes] (
		[Name],
		[Description],
		[TTL],
		[DesktopModuleId],
		[CreatedByUserID],
		[CreatedOnDate],
		[LastModifiedByUserID],
		[LastModifiedOnDate],
		[IsTask]
	) VALUES (
		@Name,
		@Description,
		@TTL,
		@DesktopModuleId,
		@CreatedUpdatedUserID,
		GETDATE(),
		@CreatedUpdatedUserID,
		GETDATE(),
		@IsTask
	)
		
	SELECT SCOPE_IDENTITY()	
END
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_GetNotificationType]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetNotificationType]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetNotificationType]
	@NotificationTypeID int
AS
BEGIN
	SELECT [NotificationTypeID], [Name], [Description], [TTL], [DesktopModuleId], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate], [IsTask]
	FROM {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypes]
	WHERE [NotificationTypeID] = @NotificationTypeID
END
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_GetNotificationTypeByName]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetNotificationTypeByName]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetNotificationTypeByName]
	@Name nvarchar(100)
AS
BEGIN
	SELECT [NotificationTypeID], [Name], [Description], [TTL], [DesktopModuleId], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate], [IsTask]
	FROM {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypes]
	WHERE [Name] LIKE @Name
END
GO

/********************************************************
 * SPROC: CoreMessaging_DeleteUserNotifications
 ********************************************************/
IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_DeleteUserNotifications]', N'P') IS NULL
	EXEC('CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_DeleteUserNotifications] AS BEGIN SELECT 1 END');
GO

ALTER PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_DeleteUserNotifications]
	@UserId int,
	@PortalId int
AS
BEGIN
	DELETE FROM {databaseOwner}{objectQualifier}CoreMessaging_Messages
	WHERE PortalId = @PortalId
	  AND MessageID IN (SELECT MessageID FROM {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients WHERE UserID = @UserId)

	SELECT @@ROWCOUNT
END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetDuplicateEmailCount]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetDuplicateEmailCount]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetDuplicateEmailCount]
    @PortalId INT
AS 
	SELECT ISNULL((SELECT COUNT(*) TotalCount FROM {databaseOwner}[{objectQualifier}Users] U Inner Join {databaseOwner}[{objectQualifier}UserPortals] UP on UP.[UserId] = U.[UserId] WHERE UP.PortalId = @PortalId  GROUP BY U.[Email] HAVING COUNT(*) > 1), 0)
GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetSingleUserByEmail]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetSingleUserByEmail]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetSingleUserByEmail]
    @PortalId INT,
	@Email nvarchar(255)
AS 
	SELECT ISNULL((SELECT TOP 1 U.UserId from {databaseOwner}[{objectQualifier}Users] U Inner Join {databaseOwner}[{objectQualifier}UserPortals] UP on UP.[UserId] = U.[UserId] Where U.Email = @Email and UP.[PortalId] = @PortalId), -1)
GO


-- make sure we don't have any duplicate amail addresses on portals where Registration_UseEmailAsUserName is turned on
-- if so we need to turn off the feature here

DECLARE @PortalId int
DECLARE @DupCount int

DECLARE Portals_Cursor CURSOR FOR 
	Select PortalId from {databaseOwner}[{objectQualifier}PortalSettings] Where SettingName = 'Registration_UseEmailAsUserName' and SettingValue = 'true'

OPEN Portals_Cursor

FETCH NEXT FROM Portals_Cursor 
INTO @PortalId

WHILE @@FETCH_STATUS = 0
BEGIN

	set @DupCount = ISNULL((SELECT COUNT(*) TotalCount FROM {databaseOwner}[{objectQualifier}Users] U Inner Join {databaseOwner}[{objectQualifier}UserPortals] UP on UP.[UserId] = U.[UserId] WHERE UP.PortalId = @PortalId  GROUP BY U.[Email] HAVING COUNT(*) > 1), 0)
	if(@DupCount > 0)
	BEGIN
		Update {databaseOwner}[{objectQualifier}PortalSettings] set SettingValue = 'false' where SettingName = 'Registration_UseEmailAsUserName' and PortalID = @PortalId
	END
	
    FETCH NEXT FROM Portals_Cursor 
    INTO @PortalId

END 
CLOSE Portals_Cursor;
DEALLOCATE Portals_Cursor;

/********************************************************
 * Table: PortalSettings (allow CultureCode Null, DNN-5743)
 ********************************************************/

--Drop Foreign Key
ALTER TABLE {databaseOwner}{objectQualifier}PortalSettings
    DROP CONSTRAINT FK_{objectQualifier}PortalSettings_{objectQualifier}Portals
GO

--Create Temp Table
CREATE TABLE {databaseOwner}Tmp_{objectQualifier}PortalSettings
    (
        PortalSettingID int NOT NULL IDENTITY (1, 1),
        PortalID int NOT NULL,
        SettingName nvarchar(50) NOT NULL,
        SettingValue nvarchar(2000) NULL,
        CreatedByUserID int NULL,
        CreatedOnDate datetime NULL,
        LastModifiedByUserID int NULL,
        LastModifiedOnDate datetime NULL,
        CultureCode nvarchar(10) NULL,
        CONSTRAINT [PK_Tmp_{objectQualifier}PortalSettings] PRIMARY KEY NONCLUSTERED ([PortalSettingID] ASC)
    )  ON [PRIMARY]
GO

CREATE CLUSTERED INDEX IX_{objectQualifier}PortalSettings ON {databaseOwner}Tmp_{objectQualifier}PortalSettings
    (
       PortalID,
       CultureCode,
       SettingName
    ) ON [PRIMARY]
GO

--Copy Data to Temp Table (updating CultureCode = '' to NULL)
IF EXISTS(SELECT * FROM {databaseOwner}{objectQualifier}PortalSettings)
    INSERT INTO {databaseOwner}Tmp_{objectQualifier}PortalSettings 
        (
            PortalID, 
            SettingName, 
            SettingValue, 
            CreatedByUserID, 
            CreatedOnDate, 
            LastModifiedByUserID, 
            LastModifiedOnDate, 
            CultureCode
        )
        SELECT PortalID, 
            SettingName, 
            SettingValue, 
            CreatedByUserID, 
            CreatedOnDate, 
            LastModifiedByUserID, 
            LastModifiedOnDate, 
            CASE WHEN CultureCode = '' THEN NULL ELSE CultureCode END
        FROM {databaseOwner}{objectQualifier}PortalSettings
GO

-- drop original table
DROP TABLE {databaseOwner}{objectQualifier}PortalSettings
GO

-- rename table
EXECUTE sp_rename N'{databaseOwner}Tmp_{objectQualifier}PortalSettings', N'{objectQualifier}PortalSettings', 'OBJECT' 
GO

-- rename PK
EXECUTE sp_rename N'PK_Tmp_{objectQualifier}PortalSettings', N'PK_{objectQualifier}PortalSettings', 'OBJECT' 
GO

-- add back foreign key
ALTER TABLE {databaseOwner}{objectQualifier}PortalSettings 
    ADD CONSTRAINT  FK_{objectQualifier}PortalSettings_{objectQualifier}Portals FOREIGN KEY ( PortalID ) REFERENCES {databaseOwner}{objectQualifier}Portals ( PortalID ) ON UPDATE NO ACTION ON DELETE CASCADE 
GO


-- All current entries are supposed to be neutral:
DELETE FROM {databaseOwner}[{objectQualifier}PortalSettings] 
 WHERE PortalSettingID NOT IN (SELECT Max(PortalSettingID) 
                                FROM  {databaseOwner}[{objectQualifier}PortalSettings] 
                                GROUP BY PortalID, SettingName)
GO

UPDATE {databaseOwner}[{objectQualifier}PortalSettings] SET CultureCode = Null;
GO

-- Consider site settings for skin and container to be language specific:
INSERT INTO  {databaseOwner}[{objectQualifier}PortalSettings]  
      (  PortalID,   CultureCode,   SettingName,   SettingValue,   CreatedByUserID,   CreatedOnDate, LastModifiedByUserID, LastModifiedOnDate)
SELECT S.PortalID, L.CultureCode, S.SettingName, S.SettingValue, S.CreatedByUserID, S.CreatedOnDate, -1,                   GetDate()
 FROM (SELECT PortalID, SettingName, SettingValue, CreatedByUserID, CreatedOnDate FROM {databaseOwner}[{objectQualifier}PortalSettings] 
        WHERE SettingName IN ('DefaultAdminContainer', 'DefaultAdminSkin', 'DefaultPortalContainer', 'DefaultPortalSkin', 'DefaultIconLocation')) S
 JOIN {databaseOwner}[{objectQualifier}PortalLocalization] L ON S.PortalID = L.PortalID;
GO

 DELETE FROM {databaseOwner}[{objectQualifier}PortalSettings]
  WHERE SettingName IN ('DefaultAdminContainer', 'DefaultAdminSkin', 'DefaultPortalContainer', 'DefaultPortalSkin', 'DefaultIconLocation')
    AND CultureCode Is Null;
GO

-- consider page after login and after logout to affect default language only (if content localization used):
MERGE INTO {databaseOwner}[{objectQualifier}PortalSettings] S 
 USING {databaseOwner}[{objectQualifier}Portals] P ON (S.PortalID = P.PortalID)
 WHEN MATCHED AND S.SettingName IN ('Redirect_AfterLogin', 'Redirect_AfterLogin') 
 THEN UPDATE SET CultureCode = P.DefaultLanguage;
GO


/********************************************************
 * SPROC: UpdatePortalSetting (improve robustness, documented)
 ********************************************************/
IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}UpdatePortalSetting]', N'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}[{objectQualifier}UpdatePortalSetting]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdatePortalSetting]
	@PortalID       Int,			-- Key, Not Null
	@SettingName    nVarChar(  50), -- Key, not Null or Empty
	@SettingValue   nVarChar(2000), -- Not Null
	@UserID			Int,			-- Not Null (editing user)
	@CultureCode    nVarChar(  10)  -- Key, Null|'' for neutral language 
AS
BEGIN
	IF IsNull(@SettingValue, '') = ''
		DELETE FROM {databaseOwner}{objectQualifier}PortalSettings 
		 WHERE PortalID    = @PortalID
		   AND SettingName = @SettingName 
		   AND IsNull(CultureCode, '') = IsNull(@CultureCode, '')
	ELSE IF EXISTS (SELECT * FROM {databaseOwner}{objectQualifier}PortalSettings 
	                    WHERE PortalID    = @PortalID
						  AND SettingName = @SettingName 
						  AND IsNull(CultureCode, '') = IsNull(@CultureCode, '')) 
		UPDATE {databaseOwner}{objectQualifier}PortalSettings
		 SET   [SettingValue]         = @SettingValue,
			   [LastModifiedByUserID] = @UserID,
			   [LastModifiedOnDate]   = GetDate()
		 WHERE [PortalID]              = @PortalID
		   AND [SettingName]           = @SettingName
		   AND IsNull(CultureCode, '') = IsNull(@CultureCode, '') 		   
	ELSE IF IsNull(@SettingName,'') != '' -- Add new record:
		INSERT INTO {databaseOwner}{objectQualifier}PortalSettings 
		           ( PortalID,  SettingName,  SettingValue, CreatedByUserID, CreatedOnDate, LastModifiedByUserID, LastModifiedOnDate, CultureCode) 
			VALUES (@PortalID, @SettingName, @SettingValue, @UserID,         GetDate(),     @UserID ,             GetDate(),          CASE WHEN @CultureCode = '' THEN Null ELSE @CultureCode END)
END
GO

/********************************************************
Begin PR #144/#188
*********************************************************/

/********************************************************
 * SPROC: GetPortalSetting (fixing CultureCode use, DNN-5742
 ********************************************************/
IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetPortalSetting]', N'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}[{objectQualifier}GetPortalSetting]
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetPortalSetting]
    @PortalID    Int,		    -- Not Null
    @SettingName nVarChar(50),	-- Not Null
    @CultureCode nVarChar(50)	-- Null|-1 for neutral language
AS
BEGIN
	SELECT TOP (1)
		SettingName,
		CASE WHEN Lower(SettingValue) Like 'fileid=%'
		 THEN {databaseOwner}[{objectQualifier}FilePath](SettingValue)
		 ELSE SettingValue 
		END   AS SettingValue,
		CreatedByUserID,
		CreatedOnDate,
		LastModifiedByUserID,
		LastModifiedOnDate,
		CultureCode
	 FROM  {databaseOwner}[{objectQualifier}PortalSettings]
	 WHERE PortalID    = @PortalID
	   AND SettingName = @SettingName
	   AND COALESCE(CultureCode, @CultureCode,'') = IsNull(@CultureCode,'')
	 ORDER BY IsNull(CultureCode,'') DESC
END
GO

/********************************************************
 * SPROC: GetPortalSettings (fixing CultureCode use, DNN-5742
 ********************************************************/
IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetPortalSettings]', N'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}[{objectQualifier}GetPortalSettings]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetPortalSettings]
    @PortalId    Int,            -- not Null!
    @CultureCode nVarChar(20)    -- Null|'' for neutral language
AS
BEGIN
	DECLARE @DefaultLanguage nVarChar(20) = '';

	IF EXISTS (SELECT * FROM {databaseOwner}[{objectQualifier}PortalLocalization] L
					JOIN {databaseOwner}[{objectQualifier}Portals] P ON L.PortalID = P.PortalID AND L.CultureCode = P.DefaultLanguage
					WHERE P.PortalID = @PortalID)
		SELECT @DefaultLanguage = DefaultLanguage 
		FROM {databaseOwner}[{objectQualifier}Portals] 
		WHERE PortalID = @PortalID

	SELECT
		PS.SettingName,
		CASE WHEN Lower(PS.SettingValue) LIKE 'fileid=%'
			THEN {databaseOwner}{objectQualifier}FilePath(PS.SettingValue)
			ELSE PS.SettingValue END   AS SettingValue,
		PS.CreatedByUserID,
		PS.CreatedOnDate,
		PS.LastModifiedByUserID,
		PS.LastModifiedOnDate,
		PS.CultureCode
		FROM {databaseOwner}[{objectQualifier}PortalSettings] PS
	WHERE 
		PortalID = @PortalId  AND 
		COALESCE(CultureCode, @CultureCode, @DefaultLanguage) = IsNull(@CultureCode, @DefaultLanguage)
END
GO

/********************************************************
 * SPROC: DeletePortalSetting (use ignored param CultureCode, DNN-5758)
 ********************************************************/
IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}DeletePortalSetting]', N'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}[{objectQualifier}DeletePortalSetting]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeletePortalSetting]
	@PortalID      Int,          -- Not Null
	@SettingName   nVarChar(50), -- Not Null
	@CultureCode   nVarChar(10)  -- Null|'' for all languages and neutral settings
AS
BEGIN
	DELETE FROM {databaseOwner}[{objectQualifier}PortalSettings]
	 WHERE (PortalID    = @PortalID)
	   AND (SettingName = @SettingName)
	   AND (CultureCode = @CultureCode OR IsNull(@CultureCode, '') = '')
END	
GO


/********************************************************
 * SPROC: DeletePortalSettings (add param CultureCode, DNN-5758)
 ********************************************************/
IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}DeletePortalSettings]', N'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}[{objectQualifier}DeletePortalSettings]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeletePortalSettings]
	@PortalID      Int,          -- Not Null
	@CultureCode   nVarChar(10)  -- Null|'' for all languages and neutral settings

AS
BEGIN
	DELETE FROM {databaseOwner}[{objectQualifier}PortalSettings]
	 WHERE (PortalID    = @PortalID)
	   AND (CultureCode = @CultureCode OR IsNull(@CultureCode, '') = '')
END	
GO

/********************************************************
 * SPROC: DeletePortalLanguages (delete PortalSettings and PortalLocalization, DNN-5759)
 ********************************************************/
IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}DeletePortalLanguages]', N'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}[{objectQualifier}DeletePortalLanguages]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeletePortalLanguages]
    @PortalId   Int, -- Null ignored (use referential integrity to delete from all Portals)
    @LanguageId Int  -- Null ignored (use referential integrity to delete for all languages)
AS
BEGIN
    IF @PortalId Is Not Null AND IsNull(@LanguageId, -1) != -1 BEGIN
       DECLARE @CultureCode nVarchar(10);
       SELECT @CultureCode = CultureCode FROM {databaseOwner}[{objectQualifier}Languages] WHERE LanguageId = @LanguageId;
       DELETE FROM {databaseOwner}[{objectQualifier}PortalLanguages]    WHERE PortalId = @PortalId AND @LanguageId  = LanguageId;
       DELETE FROM {databaseOwner}[{objectQualifier}PortalLocalization] WHERE PortalId = @PortalId AND @CultureCode = CultureCode;
       DELETE FROM {databaseOwner}[{objectQualifier}PortalSettings]     WHERE PortalId = @PortalId AND @CultureCode = CultureCode;
    END
    -- ELSE rely on referential integrity (portal or language will be deleted as well)
END
GO


/********************************************************
 * SPROC: DeleteLanguage (delete PortalSettings and PortalLocalization, DNN-5759)
 ********************************************************/
IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}DeleteLanguage]', N'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}[{objectQualifier}DeleteLanguage]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteLanguage]
	@LanguageID		Int -- Not Null
AS
BEGIN
    DECLARE @CultureCode AS nVarChar(10);
    SELECT @CultureCode = CultureCode FROM {databaseOwner}[{objectQualifier}Languages] WHERE LanguageId = @LanguageId;
    DELETE FROM {databaseOwner}[{objectQualifier}PortalLocalization] WHERE @CultureCode = CultureCode;
    DELETE FROM {databaseOwner}[{objectQualifier}PortalSettings]     WHERE @CultureCode = CultureCode;
    DELETE FROM {databaseOwner}[{objectQualifier}Languages]          WHERE @LanguageID  = LanguageID;
END
GO

/********************************************************
 * SPROC: EnsureLocalizationExists (create localized settings, DNN-5759)
 ********************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EnsureLocalizationExists]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}EnsureLocalizationExists]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EnsureLocalizationExists]
	@PortalID       Int,
	@CultureCode	nvarchar(10)
AS
BEGIN
	DECLARE @MasterLanguage nvarchar(10) = Null;
	DECLARE @LocalizationExists bit = 0;

	IF NOT EXISTS (SELECT * FROM {databaseOwner}[{objectQualifier}Languages] L 
					JOIN {databaseOwner}[{objectQualifier}PortalLanguages] P ON L.LanguageID = P.LanguageID 
					WHERE P.PortalID = @PortalID AND L.CultureCode = @CultureCode)
		RETURN; -- language does not exist for this portal

	IF EXISTS (SELECT * FROM {databaseOwner}[{objectQualifier}PortalLocalization] 
				WHERE CultureCode = @CultureCode AND PortalID = @PortalID)
		RETURN; -- already localized
	
	IF EXISTS (SELECT * FROM {databaseOwner}[{objectQualifier}PortalLocalization] L
					JOIN {databaseOwner}[{objectQualifier}Portals] P ON L.PortalID = P.PortalID AND L.CultureCode = P.DefaultLanguage
					WHERE P.PortalID = @PortalID)
		SELECT @MasterLanguage = DefaultLanguage 
		FROM {databaseOwner}[{objectQualifier}Portals] 
		WHERE PortalID = @PortalID
	ELSE IF EXISTS (SELECT * FROM {databaseOwner}[{objectQualifier}PortalLocalization] 
					WHERE CultureCode = 'en-US' and PortalID = @PortalID)
		SET @MasterLanguage = 'en-US'
	ELSE -- neither default nor system language available: take the language that was assigned first
		SELECT TOP (1) CultureCode 
		FROM {databaseOwner}[{objectQualifier}PortalLocalization] 
		WHERE PortalID = @PortalID 
		ORDER BY PortalID ASC;

	IF NOT (@MasterLanguage Is Null OR @MasterLanguage LIKE @CultureCode) 
	BEGIN  -- copy localized values from (existing and different) master language:					
		INSERT INTO {databaseOwner}[{objectQualifier}PortalLocalization]
		(	PortalId,
			CultureCode,
			PortalName,
			LogoFile,
			FooterText,
			Description,
			KeyWords,
			BackgroundFile, 
			HomeTabId,
			LoginTabId,
			UserTabId,
			AdminTabId,
			RegisterTabId,
			SearchTabId,
			CreatedByUserID,
			CreatedOnDate,
			LastModifiedByUserID,
			LastModifiedOnDate
		) SELECT
			PortalId,
			@CultureCode,
			PortalName,
			LogoFile,
			FooterText,
			Description,
			KeyWords,
			BackgroundFile, 
			HomeTabId,
			LoginTabId,
			UserTabId,
			AdminTabId,
			RegisterTabId,
			SearchTabId,
			-1,
			GETDATE(),
			-1,
			GETDATE()
		 FROM {databaseOwner}[{objectQualifier}PortalLocalization] 
		 WHERE PortalID = @PortalID AND CultureCode = @MasterLanguage;
	
		-- copy missing localized settings:
		DECLARE	
			@LocalPortalSettings TABLE(
		    [PortalID]             INT             NOT NULL,
		    [CultureCode]          NVARCHAR (10)   NOT NULL,
		    [SettingName]          NVARCHAR (50)   NOT NULL,
		    [SettingValue]         NVARCHAR (2000) NULL
		);

		INSERT INTO @LocalPortalSettings
		(
			PortalID,
			CultureCode,
			SettingName,
			SettingValue
		)
		SELECT
			PortalID,
			CultureCode,
			SettingName,
			SettingValue
		FROM {databaseOwner}[{objectQualifier}PortalSettings]
		WHERE PortalID = @PortalID AND CultureCode = @CultureCode

		MERGE INTO @LocalPortalSettings target
		USING (SELECT * FROM {databaseOwner}[{objectQualifier}PortalSettings]
				WHERE PortalId = @PortalID and CultureCode = @MasterLanguage) source 
		ON (target.SettingName = source.SettingName)
		WHEN NOT MATCHED THEN 
			INSERT (  
				PortalID,   
				CultureCode,   
				SettingName,   
				SettingValue) 
			VALUES (
				source.PortalID, 
				@CultureCode, 
				source.SettingName, 
				source.SettingValue
			);

		MERGE INTO {databaseOwner}[{objectQualifier}PortalSettings]  target
		USING (SELECT * FROM @LocalPortalSettings) source 
		ON (target.PortalID = source.PortalID AND 
			target.CultureCode = source.CultureCode AND 
			target.SettingName = source.SettingName)
		WHEN NOT MATCHED THEN 
			INSERT (  
				PortalID,   
				CultureCode,   
				SettingName,   
				SettingValue,
				CreatedByUserID, 
				CreatedOnDate, 
				LastModifiedByUserID, 
				LastModifiedOnDate) 
			VALUES (
				source.PortalID, 
				@CultureCode, 
				source.SettingName, 
				source.SettingValue,
				-1,
				GETDATE(),
				-1,
				GETDATE()
			);
	END;
END
GO
/********************************************************
End PR #144/#188
*********************************************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_SplitText]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
	DROP FUNCTION {databaseOwner}[{objectQualifier}Journal_SplitText]
GO

CREATE FUNCTION {databaseOwner}[{objectQualifier}Journal_SplitText](@text varchar(8000), @delimiter char(1))
RETURNS @words TABLE (objectid smallint primary key, string varchar(1000), optionalid int)
AS
BEGIN
	DECLARE @pos smallint,
		@i smallint,
		@j smallint,
		@s varchar(255),
        @o int

	SET @pos = 1

	WHILE @pos <= LEN(@text)
	BEGIN
		SET @i = CHARINDEX(' ', @text, @pos)
		SET @j = CHARINDEX(@delimiter, @text, @pos)

		IF @i > 0 OR @j > 0
		BEGIN
			IF @i = 0 OR (@j > 0 AND @j < @i)
				SET @i = @j

			IF @i > @pos
			BEGIN
				-- @i now holds the earliest delimiter in the string
				SET @s = SUBSTRING(@text, @pos, @i - @pos)
				SET @o = 0
	            IF CHARINDEX('|',@s,0) > 0
					BEGIN
						SET @o = SUBSTRING(@s,0,CHARINDEX('|',@s,0))
						SET @s = SUBSTRING(@s,CHARINDEX('|',@s,0)+1,LEN(@s))

					END

				IF NOT EXISTS (SELECT 1 FROM @words WHERE [string]=@s)
				BEGIN
					INSERT INTO @words
					VALUES (@pos, @s, @o)
				END
			END

			SET @pos = @i + 1
			WHILE @pos < LEN(@text) AND SUBSTRING(@text, @pos, 1) IN (' ', ',')
				SET @pos = @pos + 1
		END
		ELSE
		BEGIN
			SET @s = SUBSTRING(@text, @pos, LEN(@text) - @pos + 1)
			IF CHARINDEX('|',@s,0) > 0
			BEGIN
				SET @o = SUBSTRING(@s,0,CHARINDEX('|',@s,0))
				SET @s = SUBSTRING(@s,CHARINDEX('|',@s,0)+1,LEN(@s))

			END

			IF NOT EXISTS (SELECT 1 FROM @words WHERE [string]=@s)
			BEGIN
				INSERT INTO @words
				VALUES (@pos, @s ,@o)
			END

			SET @pos = LEN(@text) + 1
		END
	END

	RETURN
END
GO

/****************************************************************
 * SPROC: GetFoldersByPermission (improve performance) DNN-5909
 ****************************************************************/
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetFoldersByPermissions]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetFoldersByPermissions]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetFoldersByPermissions] 
	@PortalID int,
	@Permissions nvarchar(300),
	@UserID int,
	@FolderID int,
	@FolderPath nvarchar(300)

AS
	DECLARE @IsSuperUser BIT
	DECLARE @Admin BIT
	DECLARE @Read INT
	DECLARE @Write INT
	DECLARE @Browse INT
	DECLARE @Add INT

	--Determine Admin or SuperUser
	IF @UserId IN (
		SELECT UserId 
		FROM {databaseOwner}[{objectQualifier}UserRoles] 
		WHERE RoleId IN (
			SELECT RoleId 
			FROM {databaseOwner}[{objectQualifier}Roles] 
			WHERE PortalId = @PortalId 
			AND RoleName = 'Administrators')) 
	BEGIN 
		SET @Admin = 1 
	END;
	
	SELECT @IsSuperUser = IsSuperUser 
	FROM {databaseOwner}[{objectQualifier}Users] 
	WHERE UserId = @UserId;

	--Retrieve Permission Ids
	IF @Permissions LIKE '%READ%' BEGIN SELECT TOP 1 @Read = PermissionID FROM {databaseOwner}[{objectQualifier}Permission] WHERE PermissionCode = 'SYSTEM_FOLDER' AND PermissionKey = 'READ' END;
	IF @Permissions LIKE '%WRITE%' BEGIN SELECT TOP 1 @Write = PermissionID FROM {databaseOwner}[{objectQualifier}Permission] WHERE PermissionCode = 'SYSTEM_FOLDER' AND PermissionKey = 'WRITE' END;
	IF @Permissions LIKE '%BROWSE%' BEGIN SELECT TOP 1 @Browse = PermissionID FROM {databaseOwner}[{objectQualifier}Permission] WHERE PermissionCode = 'SYSTEM_FOLDER' AND PermissionKey = 'BROWSE' END;
	IF @Permissions LIKE '%ADD%' BEGIN SELECT TOP 1 @Add = PermissionID FROM {databaseOwner}[{objectQualifier}Permission] WHERE PermissionCode = 'SYSTEM_FOLDER' AND PermissionKey = 'ADD' END;

	IF @PortalID IS NULL
		BEGIN
			SELECT DISTINCT F.*
			FROM {databaseOwner}[{objectQualifier}Folders] F
			WHERE F.PortalID IS NULL
				AND (F.FolderID = @FolderID OR @FolderID = -1)
				AND (F.FolderPath = @FolderPath OR @FolderPath = '')
		  
			 ORDER BY F.FolderPath
		END
	ELSE
		BEGIN
			CREATE TABLE #Skip_Folders(folderid INT PRIMARY KEY(folderid))
			INSERT INTO #Skip_Folders
				 SELECT DISTINCT folderid FROM {databaseOwner}[{objectQualifier}FolderPermission] FP
									JOIN {databaseOwner}[{objectQualifier}Permission] P ON FP.PermissionID = P.PermissionID
									WHERE
										((P.PermissionKey = 'WRITE' OR @IsSuperUser=1 OR @Admin=1) OR
										FP.PermissionID = CASE WHEN @Read > 0 THEN @Read END OR
										FP.PermissionID = CASE WHEN @Write > 0 THEN @Write END OR
										FP.PermissionID = CASE WHEN @Browse > 0 THEN @Browse END OR
										FP.PermissionID = CASE WHEN @Add > 0 THEN @Add END)
										AND FP.FolderID NOT IN (SELECT DISTINCT folderid FROM {databaseOwner}[{objectQualifier}FolderPermission] WHERE allowaccess=0 AND (userid=@UserId OR roleid=-1 OR roleid IN (SELECT roleid FROM {databaseOwner}[{objectQualifier}UserRoles] WHERE UserID=@UserId)))		

			SELECT DISTINCT F.*
			FROM {databaseOwner}[{objectQualifier}Folders] F
				JOIN {databaseOwner}[{objectQualifier}FolderPermission] FP ON F.FolderId = FP.FolderID
				JOIN {databaseOwner}[{objectQualifier}Permission] P ON FP.PermissionID = P.PermissionID
				JOIN #Skip_Folders sf ON sf.folderid=f.folderid 
			WHERE ((F.PortalID = @PortalID) OR (F.PortalID IS NULL AND @PortalID IS NULL))
				AND (F.FolderID = @FolderID OR @FolderID = -1)
				AND (F.FolderPath = @FolderPath OR @FolderPath = '')
				AND 
					((P.PermissionKey = 'WRITE' OR @IsSuperUser=1 OR @Admin=1) OR
						FP.PermissionID = CASE WHEN @Read > 0 THEN @Read END OR
						FP.PermissionID = CASE WHEN @Write > 0 THEN @Write END OR
						FP.PermissionID = CASE WHEN @Browse > 0 THEN @Browse END OR
						FP.PermissionID = CASE WHEN @Add > 0 THEN @Add END)
				AND FP.AllowAccess = 1
			 ORDER BY F.FolderPath

			 DROP TABLE #Skip_Folders
		END
GO

/***************************************************
 * SPROC: add ordering to SearchDeletedItems_Select
 ***************************************************/
IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}SearchDeletedItems_Select]', N'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}[{objectQualifier}SearchDeletedItems_Select]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}SearchDeletedItems_Select]
    @CutoffTime	DATETIME
AS
BEGIN
	SELECT document
	FROM {databaseOwner}{objectQualifier}SearchDeletedItems
	WHERE [DateCreated] < @CutoffTime
	ORDER BY [DateCreated]
END
GO
/************************************************************/
/*****              SqlDataProvider                     *****/
/************************************************************/
